[
  {
    "objectID": "RtsEVA_demo.html",
    "href": "RtsEVA_demo.html",
    "title": "Choose an Option",
    "section": "",
    "text": "Demo of the Transformed-Stationary Extreme Value Analysis with discharge data from the HERA hydrological reanalysis"
  },
  {
    "objectID": "RtsEVA_demo.html#step-1-load-the-hydrological-time-series-and-associated-metadata",
    "href": "RtsEVA_demo.html#step-1-load-the-hydrological-time-series-and-associated-metadata",
    "title": "Choose an Option",
    "section": "Step 1: load the hydrological time series and associated metadata",
    "text": "Step 1: load the hydrological time series and associated metadata\n\nEbro @ Zaragoza:\n\nTotal length: 930 km\nMean flow: 197 m3/s\nShort description: The Ebro is Spain’s longest river, with low and high water levels alternating throughout the year, influenced by winter snowmelt and summer evaporation/human usage. The river is vital for agriculture.\nMore: Wiki\n\n\n\nArdèche @ Saint Martin:\n\nTotal length: 120 km\nMean flow: 50 m3/s\nShort description: The Ardèche is mediterranean river mostly known for tourism due to its scenic gorges. The river is known for its extreme autumn floods during the so called “épisodes cévenols”.\nMore: Wiki\n\n\n\nRhône @ Lyon:\n\nTotal length: 813 km\nMean flow: 507 m3/s\nShort description: The Rhône is France’s most powerful river, characterized by a significant seasonal variation in flow rates. The Rhône is crucial for transportation, hydropower generation, and irrigation in the region.\nMore: Wiki\n\n\n\nDanube @ Vienna:\n\nTotal length: 2850 km\nMean flow: 1800 m3/s\nShort description: The Danube is the longest river in the European Union. It is an important waterway for international trade, connecting several countries in Central and Eastern Europe.\nMore: Wiki\n\nWe choose the Ardèche for this example.\n\n\nCode\ndata=Ardeche$data\nlongitude=Ardeche$river$lon\nlatitude=Ardeche$river$lat\ntimeStamps=data$time\n\n\n\n\nLocation of the selected river:\n\n\n\n\n\n\n\n\nPlot of the original timeseries\n\n\n\n\nHydrograph of river Ardeche\n\n\nDifferent preprocessing depending on which hazard is studied:\n\nFlood:\n\nno transformation\nminimum distance between two peaks: 10 days\nanalysis performed on daily maximum discharge\n\nDrought:\n\nreversed transformation\nminimum distance between two peaks: 30 days\nanalysis performed on 7-days moving averaged discharged"
  },
  {
    "objectID": "RtsEVA_demo.html#step-2-run-tseva-for-flood",
    "href": "RtsEVA_demo.html#step-2-run-tseva-for-flood",
    "title": "Choose an Option",
    "section": "Step 2: Run TSEVA for flood",
    "text": "Step 2: Run TSEVA for flood\n\n\nCode\nhaz = \"flood\"\n\ndt1=min(diff(data$time),na.rm=T)\ndt=as.numeric(dt1)\ntdim=attributes(dt1)$units\nif (tdim==\"hours\") dt=dt/24\nif (dt==1){\n  timeDays=data$time\n}else{\n  timeDays=unique(as.Date(data$time))\n}\nif (haz==\"drought\"){\n  \n  minPeakDistanceInDays=30\n  tail=\"low\"\n  #7 day average flow for drought analysis\n  WindowSize=7\n  names(data)=c(\"date\",\"Qs\")\n  if (tdim==\"hours\") dt=dt/24\n  nRunMn = ceiling(WindowSize/dt);\n  colnames(data)\n  data$Q7=rollmean(data$Qs,nRunMn, align = \"right\", fill=NA)\n  \n  if (!exists(\"trans\")){trans=\"rev\"}\n  print(paste0(trans,\" transformation used for low flows\"))\n  \n  series=data.frame(data$date,data$Q7)\n  \n}else if (haz==\"flood\"){\n  tail=\"high\"\n  percentile=95\n  minPeakDistanceInDays=10\n  series &lt;- max_daily_value(data)\n  \n\n}\ntimeAndSeries=series\nnames(timeAndSeries)=c(\"timestamp\",\"data\")\n\ntsm=1/dt\nseries=timeAndSeries[,2]\ntimeWindow = 365.25*30; #time windows in days, the correction is done within the functions\nwindowSize=366\n\ntimeStamps=timeAndSeries$timestamp\ntransftypes=c(\"ori\",\"rev\")\ntrendtypes=c(\"trend\",\"trendPeaks\")\ntrendtrans=expand.grid(transftypes,trendtypes)\ntrendtrans = data.frame(trendtrans)\nnames(trendtrans)=c(\"transformation\",\"trend method\")\n\ntt=3\nprint(trendtrans[tt,])\n\n\n  transformation trend method\n3            ori   trendPeaks\n\n\nCode\nNonstat&lt;-TsEvaNs(timeAndSeries, timeWindow, transfType=trendtrans[tt,2], ciPercentile= 90, minPeakDistanceInDays = minPeakDistanceInDays, tail, tail = tail, trans=trendtrans[tt,1])\nnonStationaryEvaParams=Nonstat[[1]]\nstationaryTransformData=Nonstat[[2]]\n\n\nfor more details on the different transformation and trend methods, the reader can refer to the RtsEva package documentation: https://cran.r-project.org/web/packages/RtsEva/RtsEva.pdf"
  },
  {
    "objectID": "RtsEVA_demo.html#step-4-plot-results-for-flood",
    "href": "RtsEVA_demo.html#step-4-plot-results-for-flood",
    "title": "Choose an Option",
    "section": "Step 4: Plot results for flood",
    "text": "Step 4: Plot results for flood\n\nTimeseries with peaks and evolving GPD density\n\n\nReturn Level curve in 1951\n\n\n\n\n\n\n\nCurve beam (all curves from 1951 to 2020)"
  },
  {
    "objectID": "RtsEVA_demo.html#step-5-run-tseva-for-drought",
    "href": "RtsEVA_demo.html#step-5-run-tseva-for-drought",
    "title": "Choose an Option",
    "section": "Step 5: Run TSEVA for drought",
    "text": "Step 5: Run TSEVA for drought\n\n\nCode\nhaz = \"drought\"\n\ndt1=min(diff(data$time),na.rm=T)\ndt=as.numeric(dt1)\ntdim=attributes(dt1)$units\nif (tdim==\"hours\") dt=dt/24\nif (dt==1){\n  timeDays=data$time\n}else{\n  timeDays=unique(as.Date(data$time))\n}\nif (haz==\"drought\"){\n  \n  minPeakDistanceInDays=30\n  tail=\"low\"\n  #7 day average flow for drought analysis\n  WindowSize=7\n  names(data)=c(\"date\",\"Qs\")\n  if (tdim==\"hours\") dt=dt/24\n  nRunMn = ceiling(WindowSize/dt);\n  colnames(data)\n  data$Q7=rollmean(data$Qs,nRunMn, align = \"right\", fill=NA)\n  \n  if (!exists(\"trans\")){trans=\"rev\"}\n  print(paste0(trans,\" transformation used for low flows\"))\n  \n  series=data.frame(data$date,data$Q7)\n  \n}else if (haz==\"flood\"){\n  tail=\"high\"\n  percentile=95\n  minPeakDistanceInDays=10\n  series &lt;- max_daily_value(data)\n  \n\n}\n\n\n[1] \"ori transformation used for low flows\"\n\n\nCode\ntimeAndSeries=series\nnames(timeAndSeries)=c(\"timestamp\",\"data\")\ntimeStamps=timeAndSeries$timestamp\n\ntt=4\nprint(trendtrans[tt,])\n\n\n  transformation trend method\n4            rev   trendPeaks\n\n\nCode\nNonstat&lt;-TsEvaNs(timeAndSeries, timeWindow, transfType=trendtrans[tt,2], ciPercentile= 90, minPeakDistanceInDays = minPeakDistanceInDays, tail, tail = tail, trans=trendtrans[tt,1])\nnonStationaryEvaParams=Nonstat[[1]]\nstationaryTransformData=Nonstat[[2]]"
  },
  {
    "objectID": "RtsEVA_demo.html#step-6-plot-results-for-drought",
    "href": "RtsEVA_demo.html#step-6-plot-results-for-drought",
    "title": "Choose an Option",
    "section": "Step 6: Plot results for drought",
    "text": "Step 6: Plot results for drought\n\nTimeseries with peaks and evolving GPD density\n\n\n\n\n\n\n\nReturn Level curve in 1951\n\n\n\n\n\n\n\nCurve bean (all curves from 1951 to 2020)\n\n\n\n\n\n\n# Load the shiny package\nlibrary(shiny)\n\n# Define the UI\nui &lt;- fluidPage(\n  selectInput(\"option\", \"Choose an option:\",\n              choices = list(\"Option 1\" = 1,\n                             \"Option 2\" = 2,\n                             \"Option 3\" = 3,\n                             \"Option 4\" = 4))\n)\n\n# Define the server function\nserver &lt;- function(input, output) {\n # Create a reactive expression for the selected option\n  selected_option &lt;- reactive({\n    input$option\n  })\n\n  # Use the selected option in your code\n  output$result &lt;- renderText({\n    if (selected_option() == 1) {\n      # Perform operations for Option 1\n      \"You selected Option 1\"\n    } else if (selected_option() == 2) {\n      # Perform operations for Option 2\n      \"You selected Option 2\"\n    } else if (selected_option() == 3) {\n      # Perform operations for Option 3\n      \"You selected Option 3\"\n    } else if (selected_option() == 4) {\n      # Perform operations for Option 4\n      \"You selected Option 4\"\n    }\n  })\n}\n\n# Run the app\nshinyApp(ui, server)\n\nShiny applications not supported in static R Markdown documents"
  }
]